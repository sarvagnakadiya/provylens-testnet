// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class eventDeleteUser extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save eventDeleteUser entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type eventDeleteUser must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("eventDeleteUser", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): eventDeleteUser | null {
    return changetype<eventDeleteUser | null>(
      store.get("eventDeleteUser", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _address(): Bytes {
    let value = this.get("_address");
    return value!.toBytes();
  }

  set _address(value: Bytes) {
    this.set("_address", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class eventUserData extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save eventUserData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type eventUserData must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("eventUserData", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): eventUserData | null {
    return changetype<eventUserData | null>(
      store.get("eventUserData", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _address(): Bytes {
    let value = this.get("_address");
    return value!.toBytes();
  }

  set _address(value: Bytes) {
    this.set("_address", Value.fromBytes(value));
  }

  get _type(): i32 {
    let value = this.get("_type");
    return value!.toI32();
  }

  set _type(value: i32) {
    this.set("_type", Value.fromI32(value));
  }

  get _name(): Bytes {
    let value = this.get("_name");
    return value!.toBytes();
  }

  set _name(value: Bytes) {
    this.set("_name", Value.fromBytes(value));
  }

  get _physicalAddress(): Bytes {
    let value = this.get("_physicalAddress");
    return value!.toBytes();
  }

  set _physicalAddress(value: Bytes) {
    this.set("_physicalAddress", Value.fromBytes(value));
  }

  get _image(): Bytes {
    let value = this.get("_image");
    return value!.toBytes();
  }

  set _image(value: Bytes) {
    this.set("_image", Value.fromBytes(value));
  }

  get _timeUpdated(): BigInt {
    let value = this.get("_timeUpdated");
    return value!.toBigInt();
  }

  set _timeUpdated(value: BigInt) {
    this.set("_timeUpdated", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class eventAddSupplierProduct extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save eventAddSupplierProduct entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type eventAddSupplierProduct must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("eventAddSupplierProduct", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): eventAddSupplierProduct | null {
    return changetype<eventAddSupplierProduct | null>(
      store.get("eventAddSupplierProduct", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _spid(): BigInt {
    let value = this.get("_spid");
    return value!.toBigInt();
  }

  set _spid(value: BigInt) {
    this.set("_spid", Value.fromBigInt(value));
  }

  get _address(): Bytes {
    let value = this.get("_address");
    return value!.toBytes();
  }

  set _address(value: Bytes) {
    this.set("_address", Value.fromBytes(value));
  }

  get _name(): Bytes {
    let value = this.get("_name");
    return value!.toBytes();
  }

  set _name(value: Bytes) {
    this.set("_name", Value.fromBytes(value));
  }

  get _description(): Bytes {
    let value = this.get("_description");
    return value!.toBytes();
  }

  set _description(value: Bytes) {
    this.set("_description", Value.fromBytes(value));
  }

  get _unit(): BigInt {
    let value = this.get("_unit");
    return value!.toBigInt();
  }

  set _unit(value: BigInt) {
    this.set("_unit", Value.fromBigInt(value));
  }

  get _price(): BigInt {
    let value = this.get("_price");
    return value!.toBigInt();
  }

  set _price(value: BigInt) {
    this.set("_price", Value.fromBigInt(value));
  }

  get _date(): BigInt {
    let value = this.get("_date");
    return value!.toBigInt();
  }

  set _date(value: BigInt) {
    this.set("_date", Value.fromBigInt(value));
  }

  get _expiryDate(): BigInt {
    let value = this.get("_expiryDate");
    return value!.toBigInt();
  }

  set _expiryDate(value: BigInt) {
    this.set("_expiryDate", Value.fromBigInt(value));
  }

  get _timeAdded(): BigInt {
    let value = this.get("_timeAdded");
    return value!.toBigInt();
  }

  set _timeAdded(value: BigInt) {
    this.set("_timeAdded", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class eventDeleteSupplierProduct extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save eventDeleteSupplierProduct entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type eventDeleteSupplierProduct must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("eventDeleteSupplierProduct", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): eventDeleteSupplierProduct | null {
    return changetype<eventDeleteSupplierProduct | null>(
      store.get("eventDeleteSupplierProduct", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _spId(): BigInt {
    let value = this.get("_spId");
    return value!.toBigInt();
  }

  set _spId(value: BigInt) {
    this.set("_spId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class eventUpdateSupplierProductUints extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save eventUpdateSupplierProductUints entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type eventUpdateSupplierProductUints must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "eventUpdateSupplierProductUints",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): eventUpdateSupplierProductUints | null {
    return changetype<eventUpdateSupplierProductUints | null>(
      store.get("eventUpdateSupplierProductUints", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _spId(): BigInt {
    let value = this.get("_spId");
    return value!.toBigInt();
  }

  set _spId(value: BigInt) {
    this.set("_spId", Value.fromBigInt(value));
  }

  get _quantity(): BigInt {
    let value = this.get("_quantity");
    return value!.toBigInt();
  }

  set _quantity(value: BigInt) {
    this.set("_quantity", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class eventAddManufacturerProduct extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save eventAddManufacturerProduct entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type eventAddManufacturerProduct must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "eventAddManufacturerProduct",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): eventAddManufacturerProduct | null {
    return changetype<eventAddManufacturerProduct | null>(
      store.get("eventAddManufacturerProduct", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _mpId(): BigInt {
    let value = this.get("_mpId");
    return value!.toBigInt();
  }

  set _mpId(value: BigInt) {
    this.set("_mpId", Value.fromBigInt(value));
  }

  get _supplierAddress(): Array<Bytes> {
    let value = this.get("_supplierAddress");
    return value!.toBytesArray();
  }

  set _supplierAddress(value: Array<Bytes>) {
    this.set("_supplierAddress", Value.fromBytesArray(value));
  }

  get _smId(): Array<BigInt> {
    let value = this.get("_smId");
    return value!.toBigIntArray();
  }

  set _smId(value: Array<BigInt>) {
    this.set("_smId", Value.fromBigIntArray(value));
  }

  get _name(): Bytes {
    let value = this.get("_name");
    return value!.toBytes();
  }

  set _name(value: Bytes) {
    this.set("_name", Value.fromBytes(value));
  }

  get _description(): Bytes {
    let value = this.get("_description");
    return value!.toBytes();
  }

  set _description(value: Bytes) {
    this.set("_description", Value.fromBytes(value));
  }

  get _unit(): BigInt {
    let value = this.get("_unit");
    return value!.toBigInt();
  }

  set _unit(value: BigInt) {
    this.set("_unit", Value.fromBigInt(value));
  }

  get _price(): BigInt {
    let value = this.get("_price");
    return value!.toBigInt();
  }

  set _price(value: BigInt) {
    this.set("_price", Value.fromBigInt(value));
  }

  get _date(): BigInt {
    let value = this.get("_date");
    return value!.toBigInt();
  }

  set _date(value: BigInt) {
    this.set("_date", Value.fromBigInt(value));
  }

  get _expiryDate(): BigInt {
    let value = this.get("_expiryDate");
    return value!.toBigInt();
  }

  set _expiryDate(value: BigInt) {
    this.set("_expiryDate", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class eventDeleteManufacturerProduct extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save eventDeleteManufacturerProduct entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type eventDeleteManufacturerProduct must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "eventDeleteManufacturerProduct",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): eventDeleteManufacturerProduct | null {
    return changetype<eventDeleteManufacturerProduct | null>(
      store.get("eventDeleteManufacturerProduct", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _mpId(): BigInt {
    let value = this.get("_mpId");
    return value!.toBigInt();
  }

  set _mpId(value: BigInt) {
    this.set("_mpId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class eventUpdateManufacturerProductUints extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save eventUpdateManufacturerProductUints entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type eventUpdateManufacturerProductUints must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "eventUpdateManufacturerProductUints",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): eventUpdateManufacturerProductUints | null {
    return changetype<eventUpdateManufacturerProductUints | null>(
      store.get("eventUpdateManufacturerProductUints", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _dpId(): BigInt {
    let value = this.get("_dpId");
    return value!.toBigInt();
  }

  set _dpId(value: BigInt) {
    this.set("_dpId", Value.fromBigInt(value));
  }

  get _quantity(): BigInt {
    let value = this.get("_quantity");
    return value!.toBigInt();
  }

  set _quantity(value: BigInt) {
    this.set("_quantity", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class eventAddDistributorProduct extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save eventAddDistributorProduct entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type eventAddDistributorProduct must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("eventAddDistributorProduct", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): eventAddDistributorProduct | null {
    return changetype<eventAddDistributorProduct | null>(
      store.get("eventAddDistributorProduct", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _dpId(): BigInt {
    let value = this.get("_dpId");
    return value!.toBigInt();
  }

  set _dpId(value: BigInt) {
    this.set("_dpId", Value.fromBigInt(value));
  }

  get _manufacturerAddress(): Array<Bytes> {
    let value = this.get("_manufacturerAddress");
    return value!.toBytesArray();
  }

  set _manufacturerAddress(value: Array<Bytes>) {
    this.set("_manufacturerAddress", Value.fromBytesArray(value));
  }

  get _mdId(): Array<BigInt> {
    let value = this.get("_mdId");
    return value!.toBigIntArray();
  }

  set _mdId(value: Array<BigInt>) {
    this.set("_mdId", Value.fromBigIntArray(value));
  }

  get _name(): Bytes {
    let value = this.get("_name");
    return value!.toBytes();
  }

  set _name(value: Bytes) {
    this.set("_name", Value.fromBytes(value));
  }

  get _description(): Bytes {
    let value = this.get("_description");
    return value!.toBytes();
  }

  set _description(value: Bytes) {
    this.set("_description", Value.fromBytes(value));
  }

  get _unit(): BigInt {
    let value = this.get("_unit");
    return value!.toBigInt();
  }

  set _unit(value: BigInt) {
    this.set("_unit", Value.fromBigInt(value));
  }

  get _price(): BigInt {
    let value = this.get("_price");
    return value!.toBigInt();
  }

  set _price(value: BigInt) {
    this.set("_price", Value.fromBigInt(value));
  }

  get _date(): BigInt {
    let value = this.get("_date");
    return value!.toBigInt();
  }

  set _date(value: BigInt) {
    this.set("_date", Value.fromBigInt(value));
  }

  get _expiryDate(): BigInt {
    let value = this.get("_expiryDate");
    return value!.toBigInt();
  }

  set _expiryDate(value: BigInt) {
    this.set("_expiryDate", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class eventDeleteDistributorProduct extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save eventDeleteDistributorProduct entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type eventDeleteDistributorProduct must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "eventDeleteDistributorProduct",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): eventDeleteDistributorProduct | null {
    return changetype<eventDeleteDistributorProduct | null>(
      store.get("eventDeleteDistributorProduct", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _dpId(): BigInt {
    let value = this.get("_dpId");
    return value!.toBigInt();
  }

  set _dpId(value: BigInt) {
    this.set("_dpId", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class eventUpdateDistributorProductUints extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save eventUpdateDistributorProductUints entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type eventUpdateDistributorProductUints must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "eventUpdateDistributorProductUints",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): eventUpdateDistributorProductUints | null {
    return changetype<eventUpdateDistributorProductUints | null>(
      store.get("eventUpdateDistributorProductUints", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _dpId(): BigInt {
    let value = this.get("_dpId");
    return value!.toBigInt();
  }

  set _dpId(value: BigInt) {
    this.set("_dpId", Value.fromBigInt(value));
  }

  get _quantity(): BigInt {
    let value = this.get("_quantity");
    return value!.toBigInt();
  }

  set _quantity(value: BigInt) {
    this.set("_quantity", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class eventArrivalTime extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save eventArrivalTime entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type eventArrivalTime must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("eventArrivalTime", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): eventArrivalTime | null {
    return changetype<eventArrivalTime | null>(
      store.get("eventArrivalTime", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _arrivalTime(): BigInt {
    let value = this.get("_arrivalTime");
    return value!.toBigInt();
  }

  set _arrivalTime(value: BigInt) {
    this.set("_arrivalTime", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class eventSupplierManufacturerTransfer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save eventSupplierManufacturerTransfer entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type eventSupplierManufacturerTransfer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "eventSupplierManufacturerTransfer",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): eventSupplierManufacturerTransfer | null {
    return changetype<eventSupplierManufacturerTransfer | null>(
      store.get("eventSupplierManufacturerTransfer", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _smId(): BigInt {
    let value = this.get("_smId");
    return value!.toBigInt();
  }

  set _smId(value: BigInt) {
    this.set("_smId", Value.fromBigInt(value));
  }

  get _spId(): BigInt {
    let value = this.get("_spId");
    return value!.toBigInt();
  }

  set _spId(value: BigInt) {
    this.set("_spId", Value.fromBigInt(value));
  }

  get _supplierAddress(): Bytes {
    let value = this.get("_supplierAddress");
    return value!.toBytes();
  }

  set _supplierAddress(value: Bytes) {
    this.set("_supplierAddress", Value.fromBytes(value));
  }

  get _manufacturerAddress(): Bytes {
    let value = this.get("_manufacturerAddress");
    return value!.toBytes();
  }

  set _manufacturerAddress(value: Bytes) {
    this.set("_manufacturerAddress", Value.fromBytes(value));
  }

  get _dispatchTime(): BigInt {
    let value = this.get("_dispatchTime");
    return value!.toBigInt();
  }

  set _dispatchTime(value: BigInt) {
    this.set("_dispatchTime", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class manufacturerDistributoreventArrivalTime extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save manufacturerDistributoreventArrivalTime entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type manufacturerDistributoreventArrivalTime must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "manufacturerDistributoreventArrivalTime",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): manufacturerDistributoreventArrivalTime | null {
    return changetype<manufacturerDistributoreventArrivalTime | null>(
      store.get("manufacturerDistributoreventArrivalTime", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _arrivalTime(): BigInt {
    let value = this.get("_arrivalTime");
    return value!.toBigInt();
  }

  set _arrivalTime(value: BigInt) {
    this.set("_arrivalTime", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class eventManufacturerDistributorTransfer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save eventManufacturerDistributorTransfer entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type eventManufacturerDistributorTransfer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "eventManufacturerDistributorTransfer",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): eventManufacturerDistributorTransfer | null {
    return changetype<eventManufacturerDistributorTransfer | null>(
      store.get("eventManufacturerDistributorTransfer", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _mdId(): BigInt {
    let value = this.get("_mdId");
    return value!.toBigInt();
  }

  set _mdId(value: BigInt) {
    this.set("_mdId", Value.fromBigInt(value));
  }

  get _mpId(): BigInt {
    let value = this.get("_mpId");
    return value!.toBigInt();
  }

  set _mpId(value: BigInt) {
    this.set("_mpId", Value.fromBigInt(value));
  }

  get _manufacturerAddress(): Bytes {
    let value = this.get("_manufacturerAddress");
    return value!.toBytes();
  }

  set _manufacturerAddress(value: Bytes) {
    this.set("_manufacturerAddress", Value.fromBytes(value));
  }

  get _distributorAddress(): Bytes {
    let value = this.get("_distributorAddress");
    return value!.toBytes();
  }

  set _distributorAddress(value: Bytes) {
    this.set("_distributorAddress", Value.fromBytes(value));
  }

  get _dispatchTime(): BigInt {
    let value = this.get("_dispatchTime");
    return value!.toBigInt();
  }

  set _dispatchTime(value: BigInt) {
    this.set("_dispatchTime", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
