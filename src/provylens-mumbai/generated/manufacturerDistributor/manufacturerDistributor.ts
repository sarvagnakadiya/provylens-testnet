// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class manufacturerDistributoreventArrivalTime extends ethereum.Event {
  get params(): manufacturerDistributoreventArrivalTime__Params {
    return new manufacturerDistributoreventArrivalTime__Params(this);
  }
}

export class manufacturerDistributoreventArrivalTime__Params {
  _event: manufacturerDistributoreventArrivalTime;

  constructor(event: manufacturerDistributoreventArrivalTime) {
    this._event = event;
  }

  get _arrivalTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class eventManufacturerDistributorTransfer extends ethereum.Event {
  get params(): eventManufacturerDistributorTransfer__Params {
    return new eventManufacturerDistributorTransfer__Params(this);
  }
}

export class eventManufacturerDistributorTransfer__Params {
  _event: eventManufacturerDistributorTransfer;

  constructor(event: eventManufacturerDistributorTransfer) {
    this._event = event;
  }

  get _mdId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _mpId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _manufacturerAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _distributorAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _dispatchTime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class manufacturerDistributor__getAllmdIdForDistributorResultValue0Struct extends ethereum.Tuple {
  get mpId(): BigInt {
    return this[0].toBigInt();
  }

  get m_address(): Address {
    return this[1].toAddress();
  }

  get d_address(): Address {
    return this[2].toAddress();
  }

  get dispatchTime(): BigInt {
    return this[3].toBigInt();
  }

  get arrivalTime(): BigInt {
    return this[4].toBigInt();
  }
}

export class manufacturerDistributor__getProductResultValue0Struct extends ethereum.Tuple {
  get mpId(): BigInt {
    return this[0].toBigInt();
  }

  get m_address(): Address {
    return this[1].toAddress();
  }

  get d_address(): Address {
    return this[2].toAddress();
  }

  get dispatchTime(): BigInt {
    return this[3].toBigInt();
  }

  get arrivalTime(): BigInt {
    return this[4].toBigInt();
  }
}

export class manufacturerDistributor__mdIdToStructMappingResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getMpId(): BigInt {
    return this.value0;
  }

  getM_address(): Address {
    return this.value1;
  }

  getD_address(): Address {
    return this.value2;
  }

  getDispatchTime(): BigInt {
    return this.value3;
  }

  getArrivalTime(): BigInt {
    return this.value4;
  }
}

export class manufacturerDistributor extends ethereum.SmartContract {
  static bind(address: Address): manufacturerDistributor {
    return new manufacturerDistributor("manufacturerDistributor", address);
  }

  distributorTosmIdMapping(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "distributorTosmIdMapping",
      "distributorTosmIdMapping(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_distributorTosmIdMapping(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributorTosmIdMapping",
      "distributorTosmIdMapping(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllmdIdForDistributor(
    _distributorAddress: Address
  ): Array<
    manufacturerDistributor__getAllmdIdForDistributorResultValue0Struct
  > {
    let result = super.call(
      "getAllmdIdForDistributor",
      "getAllmdIdForDistributor(address):((uint256,address,address,uint32,uint32)[])",
      [ethereum.Value.fromAddress(_distributorAddress)]
    );

    return result[0].toTupleArray<
      manufacturerDistributor__getAllmdIdForDistributorResultValue0Struct
    >();
  }

  try_getAllmdIdForDistributor(
    _distributorAddress: Address
  ): ethereum.CallResult<
    Array<manufacturerDistributor__getAllmdIdForDistributorResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllmdIdForDistributor",
      "getAllmdIdForDistributor(address):((uint256,address,address,uint32,uint32)[])",
      [ethereum.Value.fromAddress(_distributorAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        manufacturerDistributor__getAllmdIdForDistributorResultValue0Struct
      >()
    );
  }

  getProduct(
    _mdid: BigInt
  ): manufacturerDistributor__getProductResultValue0Struct {
    let result = super.call(
      "getProduct",
      "getProduct(uint256):((uint256,address,address,uint32,uint32))",
      [ethereum.Value.fromUnsignedBigInt(_mdid)]
    );

    return changetype<manufacturerDistributor__getProductResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getProduct(
    _mdid: BigInt
  ): ethereum.CallResult<
    manufacturerDistributor__getProductResultValue0Struct
  > {
    let result = super.tryCall(
      "getProduct",
      "getProduct(uint256):((uint256,address,address,uint32,uint32))",
      [ethereum.Value.fromUnsignedBigInt(_mdid)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<manufacturerDistributor__getProductResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  mdId(): BigInt {
    let result = super.call("mdId", "mdId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mdId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mdId", "mdId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mdIdToStructMapping(
    param0: BigInt
  ): manufacturerDistributor__mdIdToStructMappingResult {
    let result = super.call(
      "mdIdToStructMapping",
      "mdIdToStructMapping(uint256):(uint256,address,address,uint32,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new manufacturerDistributor__mdIdToStructMappingResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_mdIdToStructMapping(
    param0: BigInt
  ): ethereum.CallResult<manufacturerDistributor__mdIdToStructMappingResult> {
    let result = super.tryCall(
      "mdIdToStructMapping",
      "mdIdToStructMapping(uint256):(uint256,address,address,uint32,uint32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new manufacturerDistributor__mdIdToStructMappingResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }
}

export class ReceiveProductCall extends ethereum.Call {
  get inputs(): ReceiveProductCall__Inputs {
    return new ReceiveProductCall__Inputs(this);
  }

  get outputs(): ReceiveProductCall__Outputs {
    return new ReceiveProductCall__Outputs(this);
  }
}

export class ReceiveProductCall__Inputs {
  _call: ReceiveProductCall;

  constructor(call: ReceiveProductCall) {
    this._call = call;
  }

  get _mdId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReceiveProductCall__Outputs {
  _call: ReceiveProductCall;

  constructor(call: ReceiveProductCall) {
    this._call = call;
  }
}

export class TransferproductCall extends ethereum.Call {
  get inputs(): TransferproductCall__Inputs {
    return new TransferproductCall__Inputs(this);
  }

  get outputs(): TransferproductCall__Outputs {
    return new TransferproductCall__Outputs(this);
  }
}

export class TransferproductCall__Inputs {
  _call: TransferproductCall;

  constructor(call: TransferproductCall) {
    this._call = call;
  }

  get _mpId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _manufacturerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _distributorAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _dispatchTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferproductCall__Outputs {
  _call: TransferproductCall;

  constructor(call: TransferproductCall) {
    this._call = call;
  }
}
